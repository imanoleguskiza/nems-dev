<?xml version="1.0" encoding="UTF-8" ?>

<project name="My subsite" default="help">

    <property file="build.properties.local" />
    <property file="build.properties" />
    <property file="build.properties.dist" />

    <target name="help" description="Phing target list">
        <exec executable="${phing.bin}"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

    <includepath classpath="src/Phing" />

    <echo msg="Loading Drush task." />
    <taskdef name="drush" classname="DrushTask" />

    <echo msg="Loading Behat task." />
    <taskdef name="behat" classname="BehatTask" />

    <echo msg="Importing the ContinuousPHP specific Phing tasks." />
    <import file="vendor/continuousphp/phing-tasks/tasks.xml" />

    <echo msg="Loading PHP Codesniffer Configuration task." />
    <taskdef name="phpcodesnifferconfiguration" classname="\NextEuropa\Phing\PhpCodeSnifferConfigurationTask" />

    <echo msg="Loading Drush Makefile task." />
    <taskdef name="drushmakefile" classname="\NextEuropa\Phing\DrushMakeFileTask" />

    <echo msg="Loading Starterkit update check task." />
    <taskdef name="checkstarterkit" classname="\NextEuropa\Phing\CheckStarterkitTask" />

    <echo msg="Loading Quality Assurance checks task." />
    <taskdef name="qualityassurance" classname="\NextEuropa\Phing\QualityAssuranceSubsiteTask" />

    <import file="build.package.xml" />
    <import file="build.test.xml" />
    <import file="resources/build.custom.xml" />

    <import file="./vendor/continuousphp/aws-sdk-phing/tasks.xml" />
    <property name="aws.profile" value="" />

    <target name="setup-aws">
        <property name="aws.profile" value="" />
        <aws-config region="${aws.region}" profile="${aws.profile}" />
    </target>

    <target name="delete-deployment-group">
        <aws-deploy-delete-deployment-group
                name="${deploy.groupName}"
                application="${deploy.applicationName}" />
    </target>

    <target name="delete-stack" depends="delete-deployment-group">
        <aws-cf-deletestack name="${cf.stackName}" />
    </target>

    <target name="run-stack">
        <if>
            <equals arg1="single-server" arg2="${cf.template}" />
            <then>
                <aws-cf-runstack
                        name="${deploy.applicationName}-${cf.stackName}"
                        updateOnConflict="true"
                        capabilities="CAPABILITY_IAM"
                        templatePath="./resources/cloudformation/${cf.template}.template">
                    <param name="KeyName" value="${cf.KeyName}" />
                    <param name="ApplicationName" value="${deploy.applicationName}" />
                    <param name="env" value="${cf.stackName}" />
                    <tag key="env" value="demo" />
                </aws-cf-runstack>
            </then>
            <else>
                <!-- Todo: This is currently untested. -->
                <aws-cf-runstack
                        name="${deploy.applicationName}-${cf.stackName}"
                        updateOnConflict="true"
                        capabilities="CAPABILITY_IAM"
                        templatePath="./resources/cloudformation/${cf.template}.template">
                    <param name="KeyName" value="${cf.KeyName}" />
                    <param name="DBName" value="${cf.DBName}" />
                    <param name="DBUser" value="${cf.DBUser}" />
                    <param name="DBPassword" value="${cf.DBPassword}" />
                    <param name="env" value="${cf.stackName}" />
                    <output name="AutoscalingGroup" property="deploy.autoScalingGroup" />
                    <tag key="env" value="demo" />
                </aws-cf-runstack>
            </else>
        </if>
    </target>

    <target name="setup-deployment-group">
        <if>
            <equals arg1="single-server" arg2="${cf.template}" />
            <then>
                <aws-deploy-deployment-group
                        name="${cf.stackName}"
                        updateOnConflict="true"
                        deploymentConfigName="CodeDeployDefault.OneAtATime"
                        serviceRole="${deploy.serviceRole}"
                        application="${deploy.applicationName}">
                    <ec2TagFilter key="stack" value="${deploy.applicationName}-${cf.stackName}" />
                </aws-deploy-deployment-group>
            </then>
            <else>
                <aws-deploy-deployment-group
                        name="${cf.stackName}"
                        updateOnConflict="true"
                        deploymentConfigName="CodeDeployDefault.OneAtATime"
                        serviceRole="${deploy.serviceRole}"
                        application="${deploy.applicationName}">
                    <autoScalingGroup name="${deploy.autoScalingGroup}" />
                </aws-deploy-deployment-group>
            </else>
        </if>
    </target>

    <target name="provision-stack"
            description="Provision a stack on AWS"
            depends="setup-aws, run-stack, setup-deployment-group" />

</project>
