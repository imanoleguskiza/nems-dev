<?xml version="1.0" encoding="UTF-8" ?>

<project name="My Subsite" default="help">

    <!-- Install the subsite. -->
    <target name="install" description="Install the subsite.">
        <!--
            Ensure the settings folder is writable so the installer can create
            the settings.php file.
         -->
        <chmod mode="0755" failonerror="false" verbose="false" quiet="true">
            <fileset dir="${platform.build.settings.dir}" />
        </chmod>
        <drush
            command="site-install"
            assume="yes"
            root="${platform.build.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="db-url" value="${drupal.db.url}" />
            <option name="site-name" value="'${subsite.name}'" />
            <option name="account-name" value="${drupal.admin.username}" />
            <option name="account-pass" value="${drupal.admin.password}" />
            <option name="account-mail" value="${drupal.admin.email}" />
            <param>${platform.profile.name}</param>
            <!-- Prevent e-mails from being sent during the installation. -->
            <param>install_configure_form.update_status_module='array(FALSE,FALSE)'</param>
        </drush>
        <!--
            Subsites are not allowed to use their own installation profile for
            historical reasons. The functionality is contained in one of more
            features and modules which need to be enabled after installation.
         -->
         <phingcall target="enable-install-modules" />

        <!-- Rebuild node access after Subsites modules activation -->
        <phingcall target="rebuild-node-access" />
    </target>

    <!-- Enable required modules after installation of the profile. -->
    <target name="enable-install-modules">
        <phingcall target="enable-modules">
            <property name="drupal.modules" value="${subsite.install.modules}" />
        </phingcall>
    </target>

    <!-- Enable development modules. -->
    <target name="enable-development-modules">
        <phingcall target="enable-modules">
            <property name="drupal.modules" value="${development.modules.enable}" />
        </phingcall>
    </target>

    <!-- Enable modules. -->
    <target name="enable-modules">
        <drush
            command="pm-enable"
            assume="yes"
            root="${platform.build.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>${drupal.modules}</param>
        </drush>
    </target>

    <!-- Set up PHP CodeSniffer. -->
    <target name="setup-php-codesniffer" description="Generate the configuration file for PHP CodeSniffer.">
        <if>
            <available file="${phpcs.config}" type="file" property="phpcs.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer default configuration file." />
                <delete file="${phpcs.config}" failonerror="false" />
            </then>
        </if>
        <if>
            <available file="${phpcs.global.config}" type="file" property="phpcs.global.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer global configuration file." />
                <delete file="${phpcs.global.config}" failonerror="false" />
            </then>
        </if>
        <phpcodesnifferconfiguration
            configFile="${phpcs.config}"
            extensions="${phpcs.extensions}"
            files="${phpcs.files}"
            globalConfig="${phpcs.global.config}"
            ignorePatterns="${phpcs.ignore}"
            report="${phpcs.report}"
            showProgress="${phpcs.progress}"
            showSniffCodes="${phpcs.sniffcodes}"
            standard="${phpcs.standard}"
        />

        <!-- Set up the git pre-push hook. -->
        <phingcall target="disable-pre-push"/>
        <if>
            <equals arg1="${phpcs.prepush.enable}" arg2="1" />
            <then>
                <symlink link="${phpcs.prepush.destination}" target="${phpcs.prepush.source}" overwrite="true" />
            </then>
        </if>
    </target>

    <!-- Disable the PHP CodeSniffer pre-push hook. -->
    <target name="disable-pre-push" description="Disable the coding standards check when pushing to a git repository.">
        <delete file="${phpcs.prepush.destination}" failonerror="false" />
    </target>

    <!-- Set up Behat. -->
    <target name="setup-behat">
        <if>
            <available file="${behat.yml.path}" type="file" property="behat.yml.available" />
            <then>
                <echo message="Deleting existing behat.yml configuration file" />
                <delete file="${behat.yml.path}" failonerror="false" />
            </then>
        </if>
        <echo message="Creating behat.yml configuration file" />
        <loadfile property="behat.yml.content" file="${behat.yml.template}">
            <filterchain>
                <replacetokens>
                    <token key="project.code.dir" value="${project.code.dir}" />
                    <token key="drupal.site.dir" value="${drupal.site.dir}" />
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                </replacetokens>
            </filterchain>
        </loadfile>
        <echo message="${behat.yml.content}" file="${behat.yml.path}" />
    </target>

    <!-- Run Behat tests. -->
    <target name="behat" description="Run Behat tests.">
        <behat
            executable="${behat.bin}"
            config="${behat.yml.path}"
            strict="${behat.options.strict}"
            verbose="${behat.options.verbosity}"
        />
    </target>

    <!-- Check that the subsite starterkit is up-to-date. -->
    <target name="check-starterkit">
        <echo msg="Checking if the subsite starterkit is up-to-date." />
        <checkstarterkit
            starterkitRepository="${starterkit.repository}"
            starterkitBranch="${starterkit.branch}"
            starterkitRemote="${starterkit.remote}"
            subsiteRepository="${project.basedir}"
        />
    </target>

    <!-- Do quality assurance checks. -->
    <target name="quality-assurance">
        <if>
            <available file="${dist.build.dir}" type="dir" />
            <then>
                <qualityassurance
                    skipSelect="${qa.skip.select}"
                    skipPhpcs="${qa.skip.phpcs}"
                    makeFile="${subsite.make}"
                    projectBaseDir="${project.basedir}"
                    resourcesDir="${subsite.resources.dir}"
                    distBuildDir="${dist.build.dir}"
                    libDir="${subsite.resources.lib.dir}"
                    profileName="${platform.profile.name}"
                />
            </then>
            <else>
                <fail message="Please run build-dist before running quality-assurance" />
            </else>
        </if>
    </target>

    <!-- Run a full static analysis. -->
    <target
        name="mjolnir"
        description="The Hammer Of Thor will execute a full static analysis on the deployment package. Run this before sending a delivery to QA."
        depends="build-dist, setup-php-codesniffer, quality-assurance"
    />

    <!-- Install a development version of the subsite. -->
    <target
        name="install-dev"
        description="Install a local development version of the subsite."
        depends="install, enable-development-modules"
    />

    <!-- Rebuild node access. -->
    <target name="rebuild-node-access">
        <drush
            command="php-eval"
            assume="yes"
            root="${platform.build.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>"node_access_rebuild()"</param>
        </drush>
    </target>
</project>
