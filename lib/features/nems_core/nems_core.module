<?php
/**
 * @file
 * Code for the NEMS core settings feature.
 */

include_once 'nems_core.features.inc';

define("NEMS_CORE_BLOCK_ACCESS_ROLE", 6);
const NEMS_CORE_BLOCK_ACCESS_PERMISSIONS = array(
  'config',
  'config_body',
  'config_desc',
  'config_lang',
  'config_page_visibility',
  'config_region',
  'config_role_visibility',
  'config_title',
  'config_type_visibility',
  'config_user_visibility',
  'delete',
  'disable',
  'enable',
  'move',
  'view',
);

/**
 * Implements hook_permission().
 */
function nems_core_permission() {
  return array(
    'access nems menu' => array(
      'title' => t('NEMS Menu access'),
      'description' => t('Restrict the access to several menu items on the NEMS template.'),
    ),
    'access europa search' => array(
      'title' => t('Europa Search access'),
      'description' => t('Access the configuration of the Europa Search tool.'),
    ),

  );
}

/**
 * Implements hook_menu_alter().
 */
function nems_core_menu_alter(&$items) {
  // List of menu items we will restrict access to.
  $path_list = array(
    'admin/config/content/ckeditor_tabber',
    'admin/config/administration/admin_menu',
    'admin/config/content/title',
    'admin/config/content/entityconnect',
    'admin/config/content/version_management/settings',
    'admin/config/media/file-system',
    'admin/config/media/file-system/transliteration',
    'admin/config/content/node_export',
    'admin/config/date/date_popup',
    'admin/config/development/strongarm',
    'admin/config/people/accounts',
    'admin/config/development/jquery_update',
    'admin/config/development/generate/user',
    'admin/config/menu_token',
    'admin/config/media/media_node',
    'admin/config/media/image-toolkit',
    'admin/config/media/colorbox',
    'admin/config/media/file-settings',
    'admin/config/regional/i18n',
    'admin/config/regional/language/configure',
    'admin/config/security/settings',
    'admin/config/system/nexteuropa-tokens',
    'admin/config/system/cron',
    'admin/config/user-interface/chosen',
    'admin/people/create',
    'admin/structure/block/add',
    'admin/config/regional/language/admin_language',
    'admin/config/regional/language/configure',
  );
  foreach ($path_list as $path) {
    if (isset($items[$path])) {
      if (isset($items[$path]['access callback'])) {
        unset($items[$path]['access callback']);
      }
      $items[$path]['access arguments'][0] = 'access nems menu';
    }
  }

  // Give access to menu block to users that can administer blocks.
  if (isset($items['admin/structure/block/add-menu-block'])) {
    $items['admin/structure/block/add-menu-block']['access callback'] = '_nems_core_menu_block_access';
  }

  // Restrict access to europa search.
  if (isset($items['admin/config/search/europa_search'])) {
    $items['admin/config/search/europa_search']['access arguments'][0] = 'access europa search';
  }
  // Add restrictions to access bartik and seven.
  if (isset($items['admin/structure/block/list/bartik'])) {
    $items['admin/structure/block/list/bartik']['access callback'] = '_nems_core_block_themes_access';
  }
  if (isset($items['admin/structure/block/list/seven'])) {
    $items['admin/structure/block/list/seven']['access callback'] = '_nems_core_block_themes_access';
  }

  // Add restrictions to tb-megamenu.
  if (isset($items['admin/structure/tb-megamenu'])) {
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name']['access callback'] = '_nems_core_tb_megamenu_access';
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name']['access arguments'] = array(3);
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name/config']['access callback'] = '_nems_core_tb_megamenu_access';
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name/config']['access arguments'] = array(3);
  }

  // Restrict access to administrator users.
  $items['user/%user/edit']['access callback'] = '_nems_core_user_edit_access';
  $items['user/%user/cancel']['access callback'] = '_nems_core_user_edit_access';
}

/**
 * Determine whether the user has permission to use menu_block module.
 *
 * @param object $account
 *   Object containing account data.
 *
 * @return bool
 *   Access rights edit result.
 */
function _nems_core_menu_block_access($account = NULL) {
  return user_access('administer blocks', $account);
}

/**
 * Add access restrictions to a block.
 *
 * @param object $module
 *   Module that built the block.
 * @param object $delta
 *   Delta identifying the block.
 * @param bool $delete
 *   Flag to mark a deletion processs.
 */
function _nems_core_restrict_block_access($module, $delta, $delete = FALSE) {
  if (!$delete) {
    foreach (NEMS_CORE_BLOCK_ACCESS_PERMISSIONS as $permission) {
      db_insert('block_access_roles')
        ->fields(array(
          'module' => $module,
          'delta' => $delta,
          'rid' => NEMS_CORE_BLOCK_ACCESS_ROLE,
          'permission' => $permission,
        ))
        ->execute();
    }
  }
  else {
    foreach (NEMS_CORE_BLOCK_ACCESS_PERMISSIONS as $permission) {
      db_delete('block_access_roles')
        ->condition('module', $module)
        ->condition('delta', $delta)
        ->condition('rid', NEMS_CORE_BLOCK_ACCESS_ROLE)
        ->condition('permission', $permission)
        ->execute();
    }
  }
}

/**
 * Implements hook_features_api_alter().
 */
function nems_core_features_api_alter(&$components) {
  // We force block_access components to be processed
  // after roles have been added.
  if (isset($components['block_access'])) {
    $setting = $components['block_access'];
    unset($components['block_access']);
    $components['block_access'] = $setting;
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * We hide bean blocks if blockreference is empty.
 */
function nems_core_block_view_alter(&$data, $block) {
  // Check if the block is a bean.
  if ($block->module == 'bean') {
    reset($data['content']['bean']);
    $bean = current($data['content']['bean']);
    // Check the bundle and look for the reference.
    if ($bean['#bundle'] == 'list_block' && !isset($bean['field_nems_block_reference'])) {
      $data['subject'] = '';
      $data['content'] = '';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide tb-megamenu items for webmasters.
 */
function nems_core_form_tb_megamenu_admin_settings_alter(&$form, &$form_state, $form_id) {
  $perm_menus = _menu_admin_per_menu_get_perm_menus();
  foreach ($form as $name => $item) {
    if (substr($name, 0, strlen('#')) !== '#') {

      if (!isset($perm_menus[$name])) {
        unset($form[$name]);
      }
    }
  }
}


/**
 * Custom access function to restrict the access to bartik and seven.
 *
 * @param object $theme
 *   Object containing theme data.
 *
 * @return bool
 *   Access rights edit result.
 */
function _nems_core_block_themes_access($theme) {

  if ($theme->name == 'bartik' || $theme->name == 'seven') {
    global $user;
    if (in_array('administrator', array_values($user->roles))) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return _block_themes_access($theme);
  }
}

/**
 * Restrict access to administrator and superuser accounts.
 *
 * @param object $account
 *   Object containing account data.
 *
 * @return bool
 *   Access rights edit result.
 */
function _nems_core_user_edit_access($account) {
  global $user;
  // Restrict access to user 1 account.
  if ($account->uid == 1 and $user->uid != 1) {
    return FALSE;
  }
  if (in_array('administrator', $account->roles) && !in_array('administrator', $user->roles)) {
    return FALSE;
  }
  return user_edit_access($account);
}


/**
 * Access callback for tb-megamenu.
 */
function _nems_core_tb_megamenu_access($menu) {
  if (user_access('administer menu')) {
    return TRUE;
  }
  $perm_menus = _menu_admin_per_menu_get_perm_menus();
  return isset($perm_menus[array_shift($menu)]);
}
